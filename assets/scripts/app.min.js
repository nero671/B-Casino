"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var app = {
  pathToLibsFiles: './assets/libs'
};
window.app = app; // polyfills
// before polyfills

(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('before')) {
      return;
    }

    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        // eslint-disable-next-line prefer-rest-params
        var argArr = Array.prototype.slice.call(arguments);
        var docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // forEach polyfill


if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    // eslint-disable-next-line no-param-reassign
    thisArg = thisArg || window;

    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}

var preLoader = function preLoader() {
  var preloader = document.getElementById('preloader');
  var preloaderImg = document.querySelector('.preloader-img');
  window.addEventListener('load', function () {
    if (preloaderImg) {
      // preloaderImg.style.transform = 'rotate(360deg)'
      setTimeout(function () {
        preloader.style.display = 'none';
      }, 1000);
    }
  });
};

preLoader();

window.onload = function () {
  var pictureObserver = lozad('.lozad', {
    threshold: 0.1
  });
  pictureObserver.observe();
};
/* eslint-disable-next-line */


var hotelSlider = function hotelSlider() {
  /* eslint-disable-next-line */
  var possibilitiesSlider;
  /* eslint-disable-next-line */

  possibilitiesSlider = new Swiper('.hotel__slider', {
    speed: 1000,
    loop: true,
    slidesPerView: 4.5,
    slidesPerGroup: 1,
    // initialSlide: 1,
    roundLengths: true,
    preloadImages: false,
    observer: true,
    observeParents: true,
    slideToClickedSlide: true,
    lazy: {
      loadPrevNext: true,
      checkInView: true
    },
    spaceBetween: 20,
    navigation: {
      nextEl: '.hotel__arrow--next',
      prevEl: '.hotel__arrow--prev'
    },
    breakpoints: {
      320: {
        slidesPerView: 1,
        slidesOffsetBefore: false,
        spaceBetween: 20
      },
      1000: {
        slidesOffsetBefore: 0,
        slidesPerView: 1,
        spaceBetween: 20
      },
      1301: {
        slidesPerView: 4.5,
        slidesPerGroup: 1,
        // initialSlide: 1,
        slidesOffsetBefore: 20,
        spaceBetween: 20
      },
      1500: {
        slidesOffsetBefore: 170
      },
      1700: {
        slidesOffsetBefore: 270
      },
      1800: {
        slidesPerView: 4.5,
        slidesPerGroup: 1,
        // initialSlide: 1,
        slidesOffsetBefore: 370,
        spaceBetween: 20
      }
    }
  });
};

hotelSlider();
/* eslint-disable-next-line */

var gallerySlider = function gallerySlider() {
  /* eslint-disable-next-line */
  var possibilitiesSlider;
  /* eslint-disable-next-line */

  possibilitiesSlider = new Swiper('.photo-gallery', {
    speed: 600,
    loop: true,
    slidesPerView: 2.7,
    spaceBetween: 30,
    centeredSlides: true,
    navigation: {
      nextEl: '.gallery__arrow--next',
      prevEl: '.gallery__arrow--prev'
    },
    breakpoints: {
      320: {
        slidesPerView: 1
      },
      576: {
        slidesPerView: 2
      },
      768: {
        slidesPerView: 2.1
      },
      1050: {
        slidesPerView: 2.4
      },
      1201: {
        slidesPerView: 2.7
      }
    }
  });
};

gallerySlider();

var useAccordion = function useAccordion() {
  var accordion = document.querySelector('.accordion');
  /* eslint-disable-next-line */

  var accordionItem = document.querySelectorAll('.accordion-item');

  var open = function open(button, dropdown) {
    /* eslint-disable-next-line */
    dropdown.style.height = "".concat(dropdown.scrollHeight, "px");
    button.classList.add('active');
    dropdown.classList.add('active');
  };

  var close = function close(button, dropdown) {
    button.classList.remove('active');
    /* eslint-disable-next-line */

    dropdown.classList.remove('active');
    /* eslint-disable-next-line */

    dropdown.style.height = '';
  };

  accordion.addEventListener('click', function (e) {
    /* eslint-disable-next-line */
    var target = e.target;

    if (target.classList.contains('accordion-title')) {
      var parent = target.closest('.accordion-item');
      /* eslint-disable-next-line */

      var dropdown = parent.querySelector('.accordion-description');
      /* eslint-disable-next-line */

      dropdown.classList.contains('active') ? close(target, dropdown) : open(target, dropdown);
    }
  });
};

useAccordion();

var headerBlack = function headerBlack() {
  var trigger = document.getElementById('about-casino');
  var bw = document.body.clientWidth;
  var headerAnimationTrigger = 'body';
  var headerAnimationStart = "".concat(window.innerHeight, "px top");

  if (bw > 480) {
    ScrollTrigger.create({
      /* eslint-disable-next-line */
      trigger: trigger,
      start: 'top 120px',
      end: 'top 120px',
      onEnter: function onEnter() {
        $('.header-logo__text').addClass('inactive');
        $('.header-logo__img').removeClass('d-none');
        $('.header').addClass('active');
        $('.header-buttons-top').addClass('d-none');
        $('.header-buttons-icons').addClass('active');
      },
      onEnterBack: function onEnterBack() {
        $('.header-logo__text').removeClass('inactive');
        $('.header-logo__img').addClass('d-none');
        $('.header').removeClass('active');
        $('.header-buttons-top').removeClass('d-none');
        $('.header-buttons-icons').removeClass('active');
      }
    });
    ScrollTrigger.create({
      trigger: headerAnimationTrigger,
      start: headerAnimationStart,
      end: '5000% top',
      onUpdate: function onUpdate(self) {
        if (self.direction === 1 && !$('body').hasClass('no-skroll')) {
          if (bw > 480) {
            $('.header').addClass('scroll');
          }
        } else {
          $('.header').removeClass('scroll');
        }
      }
    });
  }
};

headerBlack();

var toggleMenu = function toggleMenu() {
  var burger = document.querySelector('.burger');
  var popupMenu = document.querySelector('.popup-menu');
  var popupMenuContent = document.querySelector('.popup-menu_content');

  var handlerMenu = function handlerMenu() {
    popupMenuContent.classList.toggle('active-menu');
  };

  burger.addEventListener('click', function () {
    popupMenu.style.display = 'block';
    setTimeout(function () {
      handlerMenu();
    });
  });
  popupMenu.addEventListener('click', function (e) {
    if (e.target.matches('.popup-menu') || e.target.closest('.nav-link') || e.target.closest('.close-menu')) {
      popupMenu.style.display = 'none';
      handlerMenu();
    }
  });
};

toggleMenu();

var scrollTo = function scrollTo() {
  document.body.addEventListener('click', function (e) {
    if (e.target.closest('a[href^="#"]')) {
      e.preventDefault();
      var target = e.target.closest('a[href^="#"]').getAttribute('href');
      document.querySelector(target).scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
};

scrollTo();

var tabs = function tabs() {
  var tabHeader = document.querySelector('.casino-tab-header');
  var tab = document.querySelectorAll('.casino-header-tab');
  var tabContent = document.querySelectorAll('.casino-tab');

  var toggleTabContent = function toggleTabContent(index) {
    for (var i = 0; i < tabContent.length; i++) {
      if (index === i) {
        tab[i].classList.add('active');
        tabContent[i].classList.remove('d-none');
      } else {
        tab[i].classList.remove('active');
        tabContent[i].classList.add('d-none');
      }
    }
  };

  tabHeader.addEventListener('click', function (e) {
    /* eslint-disable-next-line */
    var target = e.target;

    if (target.classList.contains('casino-header-tab')) {
      tab.forEach(function (item, i) {
        if (item === target) {
          toggleTabContent(i);
        }
      });
    }
  });
};

tabs();

var openGamesPopup = function openGamesPopup() {
  var gamesBtn = document.querySelector('.casino-tab-games-buttons');
  var btn = document.querySelectorAll('.btn-game');
  var btnGamePopup = document.querySelectorAll('.btn-game-popup ');

  var toggleBtnPopup = function toggleBtnPopup(index) {
    for (var i = 0; i < btnGamePopup.length; i++) {
      if (index === i) {
        btn[i].classList.add('active');
        btnGamePopup[i].classList.add('active');
      } else {
        btn[i].classList.remove('active');
        btnGamePopup[i].classList.remove('active');
      }
    }
  };

  gamesBtn.addEventListener('click', function (e) {
    btn.forEach(function (item, i) {
      if (item === e.target) {
        toggleBtnPopup(i);
      }

      if (e.target.closest('.btn-game-popup__close')) {
        btn[i].classList.remove('active');

        for (var j = 0; j < btnGamePopup.length; j++) {
          btnGamePopup[j].classList.remove('active');
        }
      }
    });
  });
};

openGamesPopup();

var useMap = function useMap() {
  var map = document.querySelector('.maps-wrapper iframe');
  var bw = document.body.clientWidth;
  var wrapper = document.querySelector('.mobile-map-wrapper');
  document.body.addEventListener('click', function (e) {
    if (e.target.closest('.maps-wrapper')) {
      map.classList.add('active');
    } else {
      map.classList.remove('active');
    }
  });

  if (bw < 576) {
    wrapper.style.display = 'block';
  }
};

useMap();

var togglePlayPopup = function togglePlayPopup() {
  var playBtn = document.querySelectorAll('.play-btn');
  var playPopup = document.querySelector('.play-popup');
  playBtn.forEach(function (item) {
    item.addEventListener('click', function () {
      playPopup.classList.add('active');
    });
  });
  playPopup.addEventListener('click', function (e) {
    if (e.target.closest('.close-play-popup') || e.target.matches('.play-popup')) {
      playPopup.classList.remove('active');
    }
  });
};

togglePlayPopup(); // const validateForm = () => {
//   const playPopupForm = document.querySelector('.play-popup-form');
//   playPopupForm.addEventListener('input', (e) => {
//     if (e.target.matches('input[name="phone"]')) {
//       e.target.value = e.target.value.replace(/[^+?][^(0-9)]/g, '');
//     }
//   });
// };
// validateForm();

function maskPhone(selector) {
  var masked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+_______________';
  var elems = document.querySelectorAll(selector);

  function mask(event) {
    /* eslint-disable-next-line */
    var keyCode = event.keyCode;
    var template = masked;
    /* eslint-disable-next-line */

    var def = template.replace(/\D/g, '');
    /* eslint-disable-next-line */

    var val = this.value.replace(/\D/g, '');
    var i = 0;
    /* eslint-disable-next-line */

    var newValue = template.replace(/[_\d]/g, function (a) {
      return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
    });
    i = newValue.indexOf('_');

    if (i !== -1) {
      newValue = newValue.slice(0, i);
    }
    /* eslint-disable-next-line */


    var reg = template.substr(0, this.value.length).replace(/_+/g, function (a) {
      return '\\d{1,' + a.length + '}';
    }).replace(/[+()]/g, '\\$&');
    /* eslint-disable-next-line */

    reg = new RegExp('^' + reg + '$');
    /* eslint-disable-next-line */

    if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) {
      this.value = newValue;
    }

    if (event.type === 'blur' && this.value.length < 5) {
      this.value = '';
    }
  }
  /* eslint-disable-next-line */


  var _iterator = _createForOfIteratorHelper(elems),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var elem = _step.value;
      elem.addEventListener('input', mask);
      elem.addEventListener('focus', mask);
      elem.addEventListener('blur', mask);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
} // use


maskPhone('input[name="phone"]');

var warningForm = function warningForm() {
  var playPopupForm = document.querySelector('.play-popup-form');
  var name = document.querySelector('input[name="name"]');
  var phone = document.querySelector('input[name="phone"]');
  var warningFormName = document.querySelector('.warning-form__name');
  var warningFormPhone = document.querySelector('.warning-form__phone');
  var span = document.querySelectorAll('.input-span');
  playPopupForm.addEventListener('submit', function (e) {
    if (!name.value) {
      warningFormName.style.display = 'block';
      e.preventDefault();
      name.style.cssText = 'border-color: #c81947;';
      span[0].style.cssText = 'color: #c81947;';
    } else {
      name.style.cssText = 'border-color: #fff;';
      warningFormName.style.display = 'none';
      span[0].style.cssText = 'color: #a4a7ab;';
    }

    if (phone.value.length <= 9) {
      warningFormPhone.style.display = 'block';
      e.preventDefault();
      phone.style.cssText = 'border-color: #c81947;';
      span[1].style.cssText = 'color: #c81947;';
    } else {
      warningFormPhone.style.display = 'none';
      span[1].style.cssText = 'color: #a4a7ab;';
      phone.style.cssText = 'border-color: #fff;';
    }
  });
};

warningForm();

var changeVideo = function changeVideo() {
  var bw = document.body.clientWidth;
  var mobileVideo = document.querySelectorAll('.mobile-video');

  if (bw < 576) {
    mobileVideo.forEach(function (item) {
      if (item.classList.contains('inactive')) {
        item.classList.remove('inactive');
      } else {
        item.classList.add('inactive');
      }
    });
  }
};

changeVideo();
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.addLibs = {
  name: 'addLibs',
  description: 'connect the script library dynamically',
  addScriptFile: function addScriptFile(nameFile, callback) {
    var body = document.getElementsByTagName('body')[0];
    var script = document.createElement('script');

    script.onload = function () {
      return callback && callback();
    };

    script.src = "".concat(app.pathToLibsFiles, "/js/").concat(nameFile, ".js");
    body.appendChild(script);
  },
  addStyleFile: function addStyleFile(nameFile) {
    var appCss = document.getElementById('app-css');
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = "".concat(app.pathToLibsFiles, "/css/").concat(nameFile, ".css");
    appCss.before(link);
  },
  initScript: function initScript(nameFile, nameLib, callback) {
    var hasLibs = null;
    var scripts = document.querySelectorAll('script');
    scripts.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addScriptFile(nameFile, callback);
    } else {
      var timerId = setInterval(function () {
        if (window[nameLib] || window.jQuery && jQuery()[nameLib]) {
          callback();
          clearInterval(timerId);
        }
      }, 1);
    }
  },
  initStyle: function initStyle(nameFile) {
    var hasLibs = null;
    var link = document.querySelectorAll('link');
    link.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addStyleFile(nameFile);
    }
  }
}; // app.yourScriptName.init();
//# sourceMappingURL=app.min.js.map
